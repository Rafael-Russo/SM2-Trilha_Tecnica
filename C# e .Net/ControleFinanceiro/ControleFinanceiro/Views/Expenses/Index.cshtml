@model IEnumerable<ControleFinanceiro.Models.Expense>

@{
    ViewData["Title"] = "Despesas";

    double total = 0;
    string[] expensesLabels = {
            ExpenseType.FOOD.ToString(),
            ExpenseType.TRANSPORT.ToString(),
            ExpenseType.WATER.ToString(),
            ExpenseType.ELECTRICITY.ToString(),
            ExpenseType.INTERNET.ToString(),
            ExpenseType.OTHERS.ToString()
        };
    double[] expenses = new double[6];
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <p>
        <a asp-action="Create">Nova Despesa</a>
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DueDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Value)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Type)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DueDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Value)
                        @for (int i = 0; i < expensesLabels.Length; i++)
                        {
                            Console.WriteLine(i + " - " + item.Type.ToString().GetType() + " - " + expensesLabels[i].GetType());
                            if (item.Type.ToString().Equals(expensesLabels[i]))
                            {
                                expenses[i] += item.Value;
                            }
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Type)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Editar</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Detalhes</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id" style="color:red;">Deletar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @foreach (var item in expenses)
    {
        total += item;
    }
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4" style="text-align:center;">
            <h4>Total: @total</h4>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col-md-6">
            <canvas id="ExpensesChart"></canvas>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var ctx = document.getElementById('ExpensesChart').getContext('2d');

        // Cria o gráfico
        var meuGrafico = new Chart(ctx, {
            type: 'doughnut', // Tipo de gráfico "doughnut" para gráfico de rosca
            data: {
                labels: [
                            '@expensesLabels[0]',
                            '@expensesLabels[1]',
                            '@expensesLabels[2]',
                            '@expensesLabels[3]',
                            '@expensesLabels[4]',
                            '@expensesLabels[5]'
                    ], // Legendas para cada seção do gráfico
                datasets: [{
                    data: [
                        @expenses[0],
                        @expenses[1],
                        @expenses[2],
                        @expenses[3],
                        @expenses[4],
                        @expenses[5]
                    ], // Dados para cada seção
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)' // Sexta cor adicionada
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'  // Sexta cor adicionada
                    ],

                    borderWidth: 1 // Largura da borda
                }]
            }
        });
    </script>
</body>
</html>
